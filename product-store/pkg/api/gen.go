// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "product-store/pkg/types"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// PutProductCategoryJSONRequestBody defines body for PutProductCategory for application/json ContentType.
type PutProductCategoryJSONRequestBody = externalRef0.ProductCategory

// PutProductJSONRequestBody defines body for PutProduct for application/json ContentType.
type PutProductJSONRequestBody = externalRef0.Product

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Create or update a product category
	// (PUT /product-categories)
	PutProductCategory(ctx echo.Context) error
	// Get a product category by name
	// (GET /product-categories/{productCategoryName})
	GetProductCategory(ctx echo.Context, productCategoryName string) error
	// Create or update a product
	// (PUT /products)
	PutProduct(ctx echo.Context) error
	// Get a product by name
	// (GET /products/{productName})
	GetProduct(ctx echo.Context, productName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// PutProductCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PutProductCategory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutProductCategory(ctx)
	return err
}

// GetProductCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productCategoryName" -------------
	var productCategoryName string

	err = runtime.BindStyledParameterWithOptions("simple", "productCategoryName", ctx.Param("productCategoryName"), &productCategoryName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productCategoryName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProductCategory(ctx, productCategoryName)
	return err
}

// PutProduct converts echo context to params.
func (w *ServerInterfaceWrapper) PutProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutProduct(ctx)
	return err
}

// GetProduct converts echo context to params.
func (w *ServerInterfaceWrapper) GetProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productName" -------------
	var productName string

	err = runtime.BindStyledParameterWithOptions("simple", "productName", ctx.Param("productName"), &productName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProduct(ctx, productName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.PUT(baseURL+"/product-categories", wrapper.PutProductCategory)
	router.GET(baseURL+"/product-categories/:productCategoryName", wrapper.GetProductCategory)
	router.PUT(baseURL+"/products", wrapper.PutProduct)
	router.GET(baseURL+"/products/:productName", wrapper.GetProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW227cNhD9FWLaR9XaNikQ6C1NgXTRol047VNgFDQ1WjGVSGY43Hpr6N8LUlrvRbK7",
	"Vm7ukwmLc+GZc+bsLSjbOmvQsIfiFryqsZXpyFuH/s8V2TIojv9wZB0Sa0yfX0nGtaVtPJfoFWnH2hoo",
	"4PcahZEtClsJrlG4PoVQu4gs5YYCPJM2a+gyWP44nScY/T6g0CUa1pVGEpWlw6yQQWWplQwFhEaXU8l/",
	"lS2e3eZUghVpdU8GFz+NU9z1VDVWHuQ0ob1Ggq7LgPB90IQlFG/7DrM9pruSV3eB9vodKo7NHM3lcArH",
	"85mN6OGcPi60DzBgCo/x4+M1bSo7rvhytUzvaKWRa23Wu5I+ltLcxCwDZOINW0LxcrWEDDZIvs/w7cXi",
	"YhGfZB0a6TQU8OxicfEMMnCS64RpXqNsuP4nntfI4zYukQMZnx7d3xWeJQe/Q8IjbeJgUxmSMWxZQgE/",
	"DYkjDN5Z4/shfrdYxD/KGkaT6knnGq1SYP7Ox6I70cYT3sjWpcf+9vMEyF120u+bvh2h/dDuNiLw/eyq",
	"l1hqL5Q1BlW8LJDI0iM7Ceauly4DH9pWRoIPGAlVo/pLoCmd1YbTnXyY9jcDwQYJuDAxoleEktELKQz+",
	"PWKmsCSCK/sbRuCN9hzpZM14ZqvApyrsWYyef7Dl9lEYfk1YQQFf5ft9nA/LOJ9WfHcsGqaA3QfSZ2YT",
	"xwCvTiH1QSn0vgpNsxUqwV/ucS4j457PZtzSbGSjSzHgLpzcNlaW51DuvtAPUsAfBm8cqvjExH1hlQoU",
	"J3SmCJAG0RyTv6ftHjYhx1v1Hinkt+54anG7dv+5w6TwDpWutBqr5HorNPu040eyeI0TsnCSZIuM5KF4",
	"+1i7EGwFIZPGTSynY0zcyZBB6qCAiQfCqTiyg3mdTuLqSQqnssEM8ng+k44jKI3lIe8ZfFzdH/0kRfIa",
	"eUIXka2JJ4f6eKxBzPKFz+EHX9QHHiLNJ1j7Ez8Hz17pX0pDl1ghoVFYCveJ5BQ+u+ccS+nOYGYby3l+",
	"MtdHzrWPp2sbD+nsI7rELHP4X3nC3gripRQ1xaRfrJKNKHGDjXUtGhb9XcggUAMF1MyuyPMm3qut5+LF",
	"4sUCuqvu3wAAAP//7y1Jz1ERAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./types.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
