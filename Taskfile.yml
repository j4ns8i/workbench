.:
  REDISCLI_AUTH: &REDISCLI_AUTH
    sh: kubectl get secret --namespace default redis -o jsonpath="{.data.redis-password}" | base64 -d

version: '3'
tasks:

  up-k3d:
    desc: "Create a 'workbench' k3d cluster"
    cmds:
      - k3d cluster delete workbench
      - k3d cluster create workbench --registry-create workbench-registry --config .k3d.yaml
    status:
      - k3d cluster get workbench
      - "k3d cluster get workbench -oyaml | grep 'Running: true'"

  down-k3d:
    desc: "Delete the 'workbench' k3d cluster"
    cmds:
      - k3d cluster delete workbench

  up-tilt:
    desc: "Run the tilt dev server"
    deps:
      - up-k3d
    cmds:
      - tilt up

  up-dev:
    desc: "Set up the development environment"
    deps:
      - up-tilt

  down-dev:
    desc: "Tear down the development environment"
    deps:
      - down-k3d

  build-helm:
    desc: "Render the helm chart templates"
    cmds:
      - helm template local deploy/ --release-name --output-dir=deploy/rendered/

  build-api:
    desc: "Build the API container image"
    cmds:
      - docker build ./api -f ./api/build/Dockerfile -t workbench/api:latest

  build-product-store:
    desc: "Build the product-store container image"
    cmds:
      - docker build ./product-store -f ./product-store/build/Dockerfile -t workbench/product-store:latest

  run-redis-cli:
    desc: "Connect to the local dev cluster with redis-cli"
    cmds:
      - redis-cli
    env:
      REDISCLI_AUTH: *REDISCLI_AUTH

  test-api:
    desc: "Run the api tests"
    dir: api
    cmds:
      - uv run pytest

  test-product-store:
    desc: "Run the product-store tests"
    dir: product-store
    vars:
      INTEGRATION: '{{ .INTEGRATION | default "0" }}'
      TEST_PATH: '{{ if eq .INTEGRATION "1" }}./pkg/test/internal/integration/...{{ else }}./...{{ end }}'
      TEST_FLAGS: '{{ if eq .INTEGRATION "1" -}} -tags=integration {{- end }}'
    env:
      INTEGRATION: 0
      PS_TEST_REDIS_HOST: localhost
      PS_TEST_REDIS_PORT: 6379
      PS_TEST_REDIS_PASSWORD: *REDISCLI_AUTH
    cmds:
      - go tool gotestsum --format pkgname -- {{ .TEST_FLAGS }} -count=1 {{.TEST_PATH}}

  format-go:
    desc: "Format Go code"
    dir: product-store
    cmds:
      - go tool gci write -s standard -s default -s localmodule --skip-generated .
      - gofmt -w .

  lint-go:
    desc: "Lint Go code"
    dir: product-store
    cmds:
      - go vet ./...
      - go tool golangci-lint run -c ../.golangci.yml
